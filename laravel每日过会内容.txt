1.明天说一下重新认识的composer自动加载机制.
2.说一下container 服务容器整个实现.
3.实现一个简单的功能.



2017年4月26日00:16:11
昨天的看服务容器源码的任务是没完成的,但是理解了依赖注入,控制反转,控制正转,重新学习了trait.
今天的任务还是看下laravel的容器实现过程吧.配合sf上的和书上的第六章.
然后可以自己使用框架进行开发了.
2017年4月27日14:30:41
设置cookie 返回json字符


2017年4月28日12:50:033
下午过会:
讲一下laravel进度,写的功能如何利用laravel本身来实现,
下周工作内容,设计数据库,需求确定,打算先慢慢开始重写Android业务部分数据展示,使用数据迁移功能来重写数据库.再要一份最新的,在平台上运行的源码和数据库
海哥婚礼的事.
数据表设计规范:
主键 设置为int increment unsigned
用户账号类型 设置为varchar(64) 
密码类型 设置为varchar(128)
时间戳类型 设置为int
状态类型(是否寄送发票,是否广点通用户等) 设置为tinyint
用户地址,邮编,qq,微信等信息 设置为varchar(64)
用户人数类型(留存,注册等) 设置为unsigned mediumint类型
remark类备注 char(64)

2017年4月28日17:48:57
下周找老大要一下最新的代码和数据库,然后是数据库设计规范和代码设计规范.


2017年5月2日14:59:36
laravel重构的设计:
之前tp里,几乎每个方法都会存在获取用户输入然后进行查询的前置操作:
比如这种:
    	if(I('principal')) {
    		$principal = I('principal');
    		$remark = M('Admin')->getFieldById($principal, 'remark');
    	}else {
	    	$remark = $_SESSION['current_account']['remark'];
	    	$result_principal = M('Admin')->field('id, remark')->where("remark='".$remark."'")->find();
	    	if($result_principal) {
	    		$principal = $result_principal['id'];
    			$remark = $result_principal['remark'];
	    	}else {
    			$remark = M('Admin')->getFieldById($principal, 'remark');
	    	}
    	}
这个是基于功能的角度,重构的话,这一块的设计思路应该不用变化.还是这样的设计思路但是代码写成是:


另外,一般调用R函数和D函数的话,设计成其他方式实现:


